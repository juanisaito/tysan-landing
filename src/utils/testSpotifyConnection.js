// Script de prueba para verificar la conexi√≥n con Spotify API
import spotifyService from '../services/spotifyService';

export const testSpotifyConnection = async () => {
  console.log('üéµ Probando conexi√≥n con Spotify API...');
  
  try {
    // 1. Probar autenticaci√≥n
    console.log('1Ô∏è‚É£ Obteniendo token de acceso...');
    const token = await spotifyService.getAccessToken();
    console.log('‚úÖ Token obtenido:', token ? 'SUCCESS' : 'FAILED');
    
    // 2. Probar b√∫squeda de artista
    console.log('2Ô∏è‚É£ Buscando artista Tysan...');
    const artistData = await spotifyService.getArtistData();
    console.log('‚úÖ Artista encontrado:', artistData.artist.name);
    console.log('‚úÖ Top tracks:', artistData.topTracks.length);
    
    // 3. Mostrar informaci√≥n de tracks
    console.log('3Ô∏è‚É£ Informaci√≥n de tracks:');
    artistData.topTracks.forEach((track, index) => {
      console.log(`   ${index + 1}. ${track.name} - ${spotifyService.formatDuration(track.duration_ms)} - Popularity: ${track.popularity}`);
    });
    
    // 4. Probar simulaci√≥n de streams
    console.log('4Ô∏è‚É£ Simulando streams...');
    const totalStreams = artistData.topTracks.reduce((sum, track) => {
      const streams = spotifyService.simulateStreams(track.popularity);
      console.log(`   ${track.name}: ${streams.toLocaleString()} streams`);
      return sum + streams;
    }, 0);
    console.log('‚úÖ Total streams simulados:', totalStreams.toLocaleString());
    
    console.log('üéâ ¬°Conexi√≥n con Spotify exitosa!');
    return { success: true, data: artistData };
    
  } catch (error) {
    console.error('‚ùå Error en la conexi√≥n con Spotify:', error.message);
    return { success: false, error: error.message };
  }
};

// Funci√≥n para probar desde la consola del navegador
window.testSpotify = testSpotifyConnection; 